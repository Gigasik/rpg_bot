from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.battle.combat import CombatSystem, MONSTERS
from database.base import async_session
from database.models import Character, Resource
from keyboards.battle import battle_keyboard, location_keyboard

router = Router()

@router.message(F.text == "‚öîÔ∏è –ë–æ–∏")
async def battle_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–æ–µ–≤"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π:",
        reply_markup=location_keyboard()
    )

@router.callback_query(F.data.startswith("location_"))
async def select_location(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –±–æ—è"""
    location = callback.data.split("_")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
    if location == "forest":
        available_monsters = [m for m in MONSTERS if m["level"] <= 3]
    elif location == "cave":
        available_monsters = [m for m in MONSTERS if 3 <= m["level"] <= 5]
    else:  # wasteland
        available_monsters = [m for m in MONSTERS if m["level"] >= 4]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏
    buttons = [
        [InlineKeyboardButton(
            text=f"{m['name']} (—É—Ä. {m['level']})", 
            callback_data=f"monster_{m['name'].lower()}")
        ] for m in available_monsters
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"–õ–æ–∫–∞—Ü–∏—è: {location}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("monster_"))
async def start_fight(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –±–æ—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–Ω—Å—Ç—Ä–æ–º"""
    monster_name = callback.data.split("_")[1].capitalize()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        char = await session.get(Character, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        can_fight, message = await CombatSystem.check_cooldown(session, callback.from_user.id)
        if not can_fight:
            await callback.answer(message, show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –º–æ–Ω—Å—Ç—Ä–∞
        monster = next((m for m in MONSTERS if m["name"].lower() == monster_name.lower()), None)
        if not monster:
            await callback.answer("–ú–æ–Ω—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
        result = await CombatSystem.fight(char, monster)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if result["victory"]:
            response = f"üéâ –ü–æ–±–µ–¥–∞ –Ω–∞–¥ {monster['name']}!\n\n"
            response += f"–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {result['user_damage']}"
            if result["critical"]:
                response += " (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†!)"
            response += f"\n–ü–æ–ª—É—á–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {monster['gold_reward']}"
            response += f"\n–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: {monster['exp_reward']}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
            level_up = await CombatSystem.update_experience(
                session, 
                callback.from_user.id, 
                monster['exp_reward']
            )
            
            if level_up:
                response += "\n\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
        else:
            response = f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {monster['name']}!\n\n"
            response += f"–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {result['user_damage']}\n"
            response += f"–ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {result['monster_damage']}\n"
            response += "–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–æ—è."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        char.health = result["user_health"]
        session.add(char)
        await session.commit()
        
        await callback.answer("–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)
        await callback.message.edit_text(
            response,
            reply_markup=battle_keyboard()
        )
