from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from services.resources.core import ResourceService, CRAFTING_RECIPES
from database.base import async_session
from keyboards.resources import resources_keyboard, buildings_keyboard, crafting_keyboard

router = Router()

@router.message(F.text == "üå± –†–µ—Å—É—Ä—Å—ã")
async def resources_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Å—É—Ä—Å–æ–≤"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=resources_keyboard()
    )

@router.message(F.text == "–°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
async def collect_resources(message: Message):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
    async with async_session() as session:
        resources = await ResourceService.collect_resources(session, message.from_user.id)
    
    if not resources:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        return
    
    response = "üì¶ –°–æ–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n"
    response += f"üí∞ –ó–æ–ª–æ—Ç–æ: {resources['gold']}\n"
    response += f"üåæ –ï–¥–∞: {resources['food']}\n"
    response += f"ü™µ –î–µ—Ä–µ–≤–æ: {resources['wood']}\n"
    response += f"ü™® –ö–∞–º–µ–Ω—å: {resources['stone']}"
    
    await message.answer(response, reply_markup=resources_keyboard())

@router.message(F.text == "–ü–æ—Å—Ç—Ä–æ–π–∫–∏")
async def buildings_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=buildings_keyboard()
    )

@router.callback_query(F.data.startswith("building_"))
async def building_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ"""
    building_type = callback.data.split("_")[1]
    
    async with async_session() as session:
        resources = await ResourceService.get_user_resources(session, callback.from_user.id)
    
    if not resources:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ
    building_info = {
        "gold_mine": {
            "name": "–ó–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞",
            "level": resources["gold_mine_level"],
            "description": "–î–æ–±—ã–≤–∞–µ—Ç –∑–æ–ª–æ—Ç–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏–π"
        },
        "farm": {
            "name": "–§–µ—Ä–º–∞",
            "level": resources["farm_level"],
            "description": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –µ–¥—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è"
        },
        "lumber_mill": {
            "name": "–õ–µ—Å–æ–ø–∏–ª–∫–∞",
            "level": resources["lumber_mill_level"],
            "description": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"
        },
        "stone_quarry": {
            "name": "–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è",
            "level": resources["stone_quarry_level"],
            "description": "–î–æ–±—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–∫"
        }
    }
    
    building = building_info[building_type]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
    levels = ResourceService.BUILDING_LEVELS[building_type]
    current_level = min(building["level"] - 1, len(levels) - 1)
    level_info = levels[current_level]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"üè∞ {building['name']} (–£—Ä–æ–≤–µ–Ω—å {building['level']}/4)\n\n"
    response += f"{building['description']}\n\n"
    response += f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: x{level_info['production_bonus']}\n"
    response += f"–ú–∞–∫—Å. —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {level_info['storage']}\n\n"
    
    if building["level"] < 4:
        next_level = levels[min(building["level"], len(levels) - 1)]
        response += "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:\n"
        if "gold" in next_level["upgrade_cost"]:
            response += f"üí∞ –ó–æ–ª–æ—Ç–æ: {next_level['upgrade_cost']['gold']}\n"
        if "wood" in next_level["upgrade_cost"]:
            response += f"ü™µ –î–µ—Ä–µ–≤–æ: {next_level['upgrade_cost']['wood']}\n"
        if "stone" in next_level["upgrade_cost"]:
            response += f"ü™® –ö–∞–º–µ–Ω—å: {next_level['upgrade_cost']['stone']}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–£–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫—É", 
                callback_data=f"upgrade_{building_type}"
            )]
        ])
    else:
        response += "–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
        keyboard = None
    
    await callback.message.edit_text(response, reply_markup=keyboard)

@router.callback_query(F.data.startswith("upgrade_"))
async def upgrade_building(callback: CallbackQuery):
    """–£–ª—É—á—à–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫—É"""
    building_type = callback.data.split("_")[1]
    
    async with async_session() as session:
        success, message = await ResourceService.upgrade_building(
            session, 
            callback.from_user.id, 
            building_type
        )
    
    if success:
        await callback.answer("–ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞!", show_alert=True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await building_info(callback)
    else:
        await callback.answer(message, show_alert=True)

@router.message(F.text == "–ö—Ä–∞—Ñ—Ç")
async def crafting_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:",
        reply_markup=crafting_keyboard()
    )

@router.callback_query(F.data.startswith("craft_"))
async def craft_item(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ –∫—Ä–∞—Ñ—Ç"""
    recipe_index = int(callback.data.split("_")[1])
    
    if recipe_index >= len(CRAFTING_RECIPES):
        await callback.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    recipe = CRAFTING_RECIPES[recipe_index]
    
    async with async_session() as session:
        resources = await ResourceService.get_user_resources(session, callback.from_user.id)
    
    if not resources:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (resources["gold"] < recipe["gold_cost"] or
        resources["wood"] < recipe["wood_cost"] or
        resources["stone"] < recipe["stone_cost"] or
        resources["food"] < recipe["food_cost"]):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async with async_session() as session:
        char = await session.get(Character, callback.from_user.id)
        if not char or char.level < recipe["required_level"]:
            await callback.answer(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {recipe['required_level']}", show_alert=True)
            return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫—Ä–∞—Ñ—Ç
    async with async_session() as session:
        resource = await session.get(Resource, callback.from_user.id)
        
        resource.gold -= recipe["gold_cost"]
        resource.wood -= recipe["wood_cost"]
        resource.stone -= recipe["stone_cost"]
        resource.food -= recipe["food_cost"]
        
        session.add(resource)
        await session.commit()
    
    await callback.answer(f"–ü—Ä–µ–¥–º–µ—Ç '{recipe['output_item']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", show_alert=True)
    await crafting_menu(callback.message)
